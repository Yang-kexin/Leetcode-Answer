# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode: 
        if head == None: return None
        midNode = self.findMid(head)
        root = TreeNode(midNode.val)
        if head == midNode: return root
        
        root.left = self.sortedListToBST(head)
        root.right = self.sortedListToBST(midNode.next)        
        return root

        
    def findMid(self, head):
        if not head: return None
        #if not head.next: return head
        preNode = None
        fast = head
        slow = head
        while fast != None and fast.next != None:
            preNode = slow
            fast = fast.next.next
            slow = slow.next            
        
        if preNode:
            preNode.next = None
        return slow
        
        
